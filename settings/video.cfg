// Screen Gamma (only in fullscreen modes).
// Default: 2.2
//
// >> Changes the gamma correction of the display, adjusting overall brightness.
// <i> A lower value enable the player to seek the enemies in dark corners.
//
// <> Values:
// 1.6: Highest brightness.
// |
// 2.6: Lowest brightness.
r_fullscreen_gamma "2.2"

// Frame rate limiter.
// Default: 400
//
// <-> The primary benefit of a frame rate cap is to make the frame rate more stable. A moderate,
// consistent frame rate is much more desirable than a variable but sometimes high frame rate.
// Frames generated, higher than the monitor refresh rate are still useful, providing a more stable gameplay.
//
// <!> Limiting the frame rate can be used to work around bugs and other effects on extremely high frame rates.
// <i> A higher value can increase the smoothness but at the same time can eat more power.
fps_max "1000"

// Frame rate limiter while the game UI is displayed.
// Default: 120
//
// <i> Same as 'fps_max' but works only for the main menu.
fps_max_ui "60"

// Additional frame rate limit while in tools mode and a window other than the game window in focus.
// Default: 120
fps_max_tools "120"

// Moves the low latency sleep on tick frames to happen after client simulation.
// Default: 0
//
// <-> By default, the engine calculates the time between frames before it processes the client tick. This can lead to a situation where 
// the player's position is from a delayed point in time, even though their inputs are more up-to-date. This command moves the function 
// responsible for sleeping after the tick processing. This means that the sleep will be shorter because the tick processing will be 
// included in the time delta, resulting in increased responsiveness of the game and a reduced amount of texture stuttering.
//
// <!> Works in conjunction with 'r_low_latency' enabled (NVIDIA Low Latency).
// <!> Should benefit from a frame per second limitation (capped 'fps_max').
// <i> Due to its intended mechanism, it may induce roughness (non-smoothness) during the gameplay.
engine_low_latency_sleep_after_client_tick "0"

// Controls the time the engine sleeps per frame when the game is not in focus.
// Default: 20
//
// <-> Usually, when tab out of CS2, the engine will sleep for a set amount of milliseconds (repeatedly) to reduce power and resource usage.
//
// <i> Higher value can reduce CPU load and save power but there will be frame rate drops when tabbing and sound distortions if 'snd_mute_losefocus 0'.
// <i> Decreases the frame rates and produces lag on any locally hosted servers when tabbing out.
// <i> A lower value (or disable value) is recommended for streaming and local hosts.
engine_no_focus_sleep "30"

// Disable Profiling
vprof_off
iv_off